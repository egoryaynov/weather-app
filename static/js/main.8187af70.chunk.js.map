{"version":3,"sources":["redux/selectors/currentWeatherSelector.js","redux/selectors/favoritesSelector.js","styles/variables.js","assets/images/search.svg","api/api.js","utils/weather/common.js","utils/weather/currentWeather.js","redux/reducers/currentWeatherReducer.js","components/WeaherInfo/Search/Search.jsx","assets/images/menu-bar.svg","components/WeaherInfo/MenuBar/MenuBar.jsx","components/WeaherInfo/ShowInfo/MainImage/MainImage.jsx","components/WeaherInfo/ShowInfo/Temperature/Temperature.jsx","components/WeaherInfo/ShowInfo/Date/Date.jsx","components/WeaherInfo/ShowInfo/Line.js","components/WeaherInfo/ShowInfo/OtherConditions/OtherConditions.jsx","assets/images/star.svg","assets/images/filled-star.svg","components/WeaherInfo/ShowInfo/Location/AddToFavoriteButton/AddToFavoriteButton.jsx","components/WeaherInfo/ShowInfo/Location/Location.jsx","components/WeaherInfo/ShowInfo/ShowInfo.jsx","assets/preloader.svg","components/common/Preloader.jsx","utils/localStorage/favoriteLocalStorage.js","redux/reducers/favoritesReducer.js","components/WeaherInfo/WeatherInfo.jsx","styles/common/InfoBlock.js","components/WeaherMain/Forecast/Forecast.jsx","components/WeaherMain/CurrentWeather/Blocs/InfoBlock.js","components/WeaherMain/CurrentWeather/Blocs/Humidity.jsx","components/WeaherMain/CurrentWeather/Blocs/Precipitation.jsx","assets/images/sunrise.svg","assets/images/sunset.svg","components/WeaherMain/CurrentWeather/Blocs/SunsetSunrise.jsx","components/WeaherMain/CurrentWeather/Blocs/Temp.jsx","components/WeaherMain/CurrentWeather/Blocs/Visibility.jsx","components/WeaherMain/CurrentWeather/Compass/Compass.jsx","components/WeaherMain/CurrentWeather/Blocs/Wind.jsx","components/WeaherMain/CurrentWeather/CurrentWeather.jsx","components/WeaherMain/Favorites/Favorites.jsx","utils/weather/forecastWeather.js","redux/reducers/forecastWeatherReducer.js","redux/selectors/forecastSelector.js","components/WeaherMain/WeatherMain.jsx","redux/selectors/initializationSelector.js","redux/reducers/initializationReducer.js","App.js","redux/store.js","styles/GlobalStyles.js","index.js"],"names":["getCurrentCitySelector","state","currentWeather","currentCity","getErrorMessageSelector","error","message","getIsFetchingCurrentWeatherSelector","isFetching","getFavoritesSelector","favorites","getIsFetchingFavoriteSelector","getFavoritesWeatherSelector","favoritesWeather","colors","fonts","API_KEY","getCurrentWeatherByCity","city","a","fetch","response","json","getCurrentWeatherByID","cityID","get5DaysForecastByID","getIconUrl","iconCode","zoom","getFormattedMonth","dateMonth","monthNotFormatted","String","length","getCurrentWeatherFromAPIByID","getCurrentWeatherFromAPI","getCurrentWeatherFromAPIByCity","callback","parameter","data","cod","normalizeData","snow","rain","weather","map","weatherItem","icon2x","icon","icon4x","id","name","country","sys","sunset","getSunsetOrSunriseTime","sunrise","timezone","date","getDate","temp","currentTemp","Math","round","main","tempMin","tempMax","feelsLike","pressure","humidity","visibility","toFixed","wind","clouds","all","Date","hours","getHours","weekDay","getDay","timestamp","minutes","getMinutes","toString","SET_WEATHER","SET_ERROR","SET_IS_FETCHING","initialState","setCurrentWeatherActionCreator","payload","type","setErrorActionCreator","setIsFetchingActionCreator","fetched","setCurrentWeather","dispatch","currentWeatherReducer","action","Input","styled","input","Search","React","useState","search","setSearch","useDispatch","src","searchIcon","alt","autoFocus","placeholder","value","onChange","event","target","onKeyPress","key","Bar","button","MenuBar","className","setMustShowFavorite","mustShowFavorite","onClick","BarIcon","MainImageWrapper","div","MainImage","TemperatureWrapper","Temperature","DateWrapper","Line","hr","OtherConditionsWrapper","OtherConditions","item","description","Icon","img","Button","AddToFavoriteButton","isFavorite","toggleFavorite","filledStar","star","LocationWrapper","Location","cityInfo","ShowInfo","Image","Preloader","preloaderSvg","STORAGE_NAME","getFavoritesFromLocalStorage","localStorage","getItem","setFavoritesItemToLocalStorage","setItem","JSON","stringify","GET_FAVORITES","GET_FAVORITES_WEATHER","errorMessage","getFavoritesWeatherActionCreator","getFavorites","favoritesLocalStorage","getFavoritesActionCreator","parse","deleteFavorite","favoriteID","filter","removeItem","favoritesReducer","Info","InfoWrapper","CityNotSelectedWrapper","ErrorMessage","CityNotSelected","WeatherInfo","useSelector","setIsFavorite","useEffect","includes","push","InfoBlock","InfoBlockBig","InfoBlockSmall","Wrapper","ForecastBlock","Temp","Forecast","forecast","currentWeatherIcon","forecastWithCurrentWeather","useMemo","day","NaN","night","slice","forecastItem","isNaN","HumidityStyled","Humidity","PrecipitationStyled","Precipitation","SunsetSunriseStyled","SunsetSunrise","sunriseSvg","sunsetSvg","TempStyled","VisibilityStyled","Visibility","CompassWrapper","props","degrees","Compass","version","xmlns","viewBox","d","WindStyled","Wind","windSpeed","CurrentWeather","deg","speed","FavoriteWrapper","WeatherItem","Weather","Favorites","getFavoritesWeather","onSelectFavorite","getForecastWeatherFromAPIByID","fiveDaysObjectWithDatesKeys","getFiveDaysWithDatesKeys","list","forEach","listItem","currentDateArray","split","Object","keys","prepareForecastItem","currentDate","currentDay","fiveDaysObject","i","setDate","month","getMonth","getFullYear","dayFiltered","pod","nightFiltered","dayAverageTemp","getSumDayNightTemp","nightAverageTemp","iconUrl","selectForecastIcon","getWeekDayText","filteredArray","reduce","sum","floor","dateForecast","SET_FORECAST","setForecastActionCreator","forecastWeatherReducer","getForecastSelector","forecastWeather","getIsFetchingForecastSelector","Main","WeatherMain","isForecastFetching","newFavoritesWeather","favoritesWeatherIDs","favoriteId","getFavoritesWeatherThunk","favoriteItem","getIsFetchingSelector","initialization","INITIALIZED_SUCCESS","initialized","initializeApp","initializationReducer","App","reducers","combineReducers","store","createStore","compose","applyMiddleware","thunkMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8187af70.chunk.js","sourcesContent":["export const getCurrentCitySelector = (state) => {\r\n    return state.currentWeather.currentCity;\r\n}\r\n\r\nexport const getErrorMessageSelector = (state) => {\r\n    return state.currentWeather.error && state.currentWeather.error.message;\r\n}\r\n\r\nexport const getIsFetchingCurrentWeatherSelector = (state) => {\r\n    return state.currentWeather.isFetching;\r\n}","export const getFavoritesSelector = (state) => {\r\n    return state.favorites.favorites;\r\n}\r\nexport const getIsFetchingFavoriteSelector = (state) => {\r\n    return state.favorites.isFetching;\r\n}\r\nexport const getFavoritesWeatherSelector = (state) => {\r\n    return state.favorites.favoritesWeather;\r\n}","// COLORS\r\nexport const colors = {\r\n    bodyBgColor: '#D6D7DA',\r\n    mainBgColor: '#F6F6F8',\r\n    greyFontColorDark: '#424242',\r\n    greyFontColorLight: '#D6D7DA',\r\n}\r\n\r\nexport const fonts = {\r\n    CarmenSans: \"'Carmen Sans', -apple-system, BlinkMacSystemFont, serif\",\r\n    Roboto: \"'Roboto', serif\"\r\n}","export default __webpack_public_path__ + \"static/media/search.b0ced60d.svg\";","const API_KEY = \"02aa4385a4870233b2daa4f663c30d92\";\r\n\r\nexport const getCurrentWeatherByCity = async (city) => {\r\n    const response = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n\r\n    return await response.json();\r\n}\r\nexport const getCurrentWeatherByID = async (cityID) => {\r\n    const response = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?id=${cityID}&appid=${API_KEY}&units=metric`);\r\n\r\n    return await response.json();\r\n}\r\n\r\nexport const get5DaysForecastByID = async (cityID) => {\r\n    const response = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/forecast?id=${cityID}&appid=${API_KEY}&units=metric&cnt=48`);\r\n\r\n    return await response.json();\r\n}","export const getIconUrl = (iconCode, zoom) => {\r\n    return `http://openweathermap.org/img/wn/${iconCode}@${zoom}.png`\r\n}\r\n\r\nexport const getFormattedMonth = (dateMonth) => {\r\n    const monthNotFormatted = String(dateMonth + 1);\r\n    return monthNotFormatted.length === 1\r\n        ? '0' + monthNotFormatted\r\n        : monthNotFormatted\r\n}","import {getCurrentWeatherByCity, getCurrentWeatherByID} from \"../../api/api\";\r\nimport {getIconUrl} from \"./common\";\r\n\r\nexport const getCurrentWeatherFromAPIByID = async (cityID) => {\r\n    return await getCurrentWeatherFromAPI(getCurrentWeatherByID, cityID);\r\n}\r\nexport const getCurrentWeatherFromAPIByCity = async (city) => {\r\n    return await getCurrentWeatherFromAPI(getCurrentWeatherByCity, city);\r\n}\r\n\r\nconst getCurrentWeatherFromAPI = async (callback, parameter) => {\r\n    const data = await callback(parameter);\r\n\r\n    if (data.cod === 200) {\r\n        return normalizeData(data);\r\n    }\r\n\r\n    // IF ERROR -> {cod: 404..., message: \"error message\"}\r\n    return data;\r\n}\r\n\r\nconst normalizeData = (data) => {\r\n    const snow = data.snow || null;\r\n    const rain = data.rain || null;\r\n    const weather = data.weather.map(weatherItem => {\r\n        return {\r\n            ...weatherItem,\r\n            icon2x: getIconUrl(weatherItem.icon, '2x'),\r\n            icon4x: getIconUrl(weatherItem.icon, '4x'),\r\n        }\r\n    });\r\n\r\n    return {\r\n        cod: data.cod,\r\n        city: {\r\n            id: data.id,\r\n            name: data.name,\r\n            country: data.sys.country,\r\n            sunset: getSunsetOrSunriseTime(data.sys.sunset),\r\n            sunrise: getSunsetOrSunriseTime(data.sys.sunrise),\r\n            timezone: data.timezone,\r\n        },\r\n        date: getDate(),\r\n        weather: weather,\r\n        temp: {\r\n            currentTemp: Math.round(data.main.temp),\r\n            tempMin: Math.round(data.main[\"temp_min\"]),\r\n            tempMax: Math.round(data.main[\"temp_max\"]),\r\n            feelsLike: Math.round(data.main[\"feels_like\"]),\r\n        },\r\n        pressure: data.main.pressure,\r\n        humidity: data.main.humidity,\r\n        // CONVERTED METERS TO KM\r\n        visibility: (data.visibility / 1000).toFixed(2),\r\n        wind: {...data.wind},\r\n        clouds: data.clouds.all,\r\n        snow: snow && snow[\"1h\"],\r\n        rain: rain && rain[\"1h\"]\r\n    }\r\n}\r\n\r\nconst getDate = () => {\r\n    const date = new Date();\r\n    const weekNumToStr = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    return {\r\n        hours: date.getHours(),\r\n        weekDay: weekNumToStr[date.getDay()],\r\n    }\r\n}\r\nconst getSunsetOrSunriseTime = (timestamp) => {\r\n    const date = new Date(timestamp * 1000);\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes().toString().length === 1\r\n        ? '0' + date.getMinutes()\r\n        : date.getMinutes();\r\n\r\n    return `${hours}:${minutes}`\r\n}","import {getCurrentWeatherFromAPIByCity, getCurrentWeatherFromAPIByID} from \"../../utils/weather/currentWeather\";\r\n\r\nconst SET_WEATHER = \"currentWeather/SET_WEATHER\";\r\nconst SET_ERROR = \"currentWeather/SET_ERROR\";\r\nconst SET_IS_FETCHING = \"currentWeather/SET_IS_FETCHING\";\r\n\r\nconst initialState = {\r\n    currentCity: null,\r\n    error: null,\r\n    isFetching: false\r\n}\r\n\r\nconst currentWeatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state,\r\n                currentCity: action.payload || null\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.fetched\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCurrentWeatherActionCreator = (payload) => ({type: SET_WEATHER, payload})\r\nexport const setErrorActionCreator = (error) => ({type: SET_ERROR, error})\r\nconst setIsFetchingActionCreator = (fetched) => ({type: SET_IS_FETCHING, fetched})\r\n\r\nexport const setCurrentWeatherByID = (cityID) => async (dispatch) => {\r\n    dispatch(setCurrentWeather(getCurrentWeatherFromAPIByID, cityID));\r\n}\r\nexport const setCurrentWeatherByCity = (city) => async (dispatch) => {\r\n    dispatch(setCurrentWeather(getCurrentWeatherFromAPIByCity, city));\r\n}\r\n\r\nconst setCurrentWeather = (callback, parameter) => async (dispatch) => {\r\n    dispatch(setCurrentWeatherActionCreator());\r\n    dispatch(setIsFetchingActionCreator(true));\r\n\r\n    const data = await callback(parameter);\r\n\r\n    if (data.cod === 200) {\r\n        dispatch(setCurrentWeatherActionCreator(data));\r\n    } else {\r\n        dispatch(setErrorActionCreator(data));\r\n    }\r\n\r\n    dispatch(setIsFetchingActionCreator(false));\r\n}\r\n\r\nexport default currentWeatherReducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {fonts} from \"../../../styles/variables\";\r\n\r\nimport searchIcon from \"../../../assets/images/search.svg\";\r\nimport {setCurrentWeatherByCity} from \"../../../redux/reducers/currentWeatherReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Input = styled.input`\r\n  width: 110px;\r\n  font-family: ${fonts.Roboto};\r\n  font-size: 1.2rem;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  padding-left: 5px;\r\n`;\r\n\r\nconst Search = () => {\r\n    const [search, setSearch] = React.useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            dispatch(setCurrentWeatherByCity(search));\r\n        }\r\n    }\r\n    const onChange = (event) => {\r\n        setSearch(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src={searchIcon} alt=\"Search\"/>\r\n            <Input type=\"text\"\r\n                   autoFocus={true}\r\n                   placeholder=\"Search for places....\"\r\n                   value={search}\r\n                   onChange={onChange}\r\n                   onKeyPress={handleKeyDown}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","export default __webpack_public_path__ + \"static/media/menu-bar.4b5d8302.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport BarIcon from '../../../assets/images/menu-bar.svg'\r\n\r\nconst Bar = styled.button`\r\n  background-color: transparent;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst MenuBar = ({className, setMustShowFavorite, mustShowFavorite}) => {\r\n    return (\r\n        <Bar className={className} onClick={() => setMustShowFavorite(!mustShowFavorite)}>\r\n            <img src={BarIcon} alt=\"Open favorites\"/>\r\n        </Bar>\r\n    );\r\n};\r\n\r\nexport default MenuBar;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst MainImageWrapper = styled.div`\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 200px;\r\n`;\r\n\r\nconst MainImage = ({currentWeather}) => {\r\n    return (\r\n        <MainImageWrapper>\r\n            <img src={currentWeather.icon4x} alt={currentWeather.main}/>\r\n        </MainImageWrapper>\r\n    );\r\n};\r\n\r\nexport default MainImage;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst TemperatureWrapper = styled.div`\r\n  text-align: center;\r\n  margin: -40px 0 0 0;\r\n  padding: 0;\r\n  width: 220px;\r\n\r\n  span.temp {\r\n    margin-right: 28px;\r\n    font-size: 5.5rem;\r\n    position: relative;\r\n  }\r\n\r\n  span.deg {\r\n    font-size: 2.4rem;\r\n    position: absolute;\r\n    top: 10px;\r\n    right: -25px;\r\n  }\r\n`;\r\n\r\nconst Temperature = ({currentTemp}) => {\r\n    return (\r\n        <TemperatureWrapper>\r\n            <span className=\"temp\">\r\n                {currentTemp}\r\n                <span className=\"deg\">℃</span>\r\n            </span>\r\n        </TemperatureWrapper>\r\n    );\r\n};\r\n\r\nexport default Temperature;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {colors} from \"../../../../styles/variables\";\r\n\r\nconst DateWrapper = styled.div`\r\n  margin-top: 3px;\r\n  font-size: 1.4rem;\r\n\r\n  span.time {\r\n    color: ${colors.greyFontColorLight};\r\n  }\r\n`;\r\n\r\nconst Date = ({date}) => {\r\n    return (\r\n        <DateWrapper>\r\n            <span className=\"weekDay\">{date.weekDay + ', '}</span>\r\n            <span className=\"time\">{date.hours + ':00'}</span>\r\n        </DateWrapper>\r\n    );\r\n};\r\n\r\nexport default Date;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Line = styled.hr`\r\n  border: none;\r\n  outline: none;\r\n  width: 125px;\r\n  height: 1px;\r\n  background-color: #48484aa6;\r\n  margin: 40px 0 25px;\r\n`;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {colors} from \"../../../../styles/variables\";\r\n\r\nconst OtherConditionsWrapper = styled.div`\r\n  width: 115px;\r\n  height: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  .item {\r\n    height: 30px;\r\n    position: relative;\r\n\r\n    &:not(:last-child) {\r\n      margin-bottom: 15px;\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    position: absolute;\r\n    top: -8px;\r\n    left: -40px;\r\n  }\r\n\r\n  span {\r\n    font-size: 1.1rem;\r\n    color: ${colors.greyFontColorDark};\r\n  }\r\n`;\r\n\r\nconst OtherConditions = ({weather}) => {\r\n    return (\r\n        <OtherConditionsWrapper>\r\n            {weather.map(item => (\r\n                <div className=\"item\" key={item.id}>\r\n                    <img src={item.icon2x} alt={item.description}/>\r\n                    <span>{item.description}</span>\r\n                </div>\r\n            ))}\r\n        </OtherConditionsWrapper>\r\n    );\r\n};\r\n\r\nexport default OtherConditions;\r\n","export default __webpack_public_path__ + \"static/media/star.1d547ab3.svg\";","export default __webpack_public_path__ + \"static/media/filled-star.b7287eed.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport star from '../../../../../assets/images/star.svg';\r\nimport filledStar from '../../../../../assets/images/filled-star.svg';\r\n\r\nconst Icon = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst Button = styled.button`\r\n  width: 18px;\r\n  height: 17px;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst AddToFavoriteButton = ({isFavorite, cityID, toggleFavorite}) => {\r\n    return (\r\n        <>\r\n            <Button onClick={() => toggleFavorite(cityID)}>\r\n                {isFavorite\r\n                    ? <Icon src={filledStar} alt='Is favorite'/>\r\n                    : <Icon src={star} alt='Not is favorite'/>}\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddToFavoriteButton;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nimport AddToFavoriteButton from \"./AddToFavoriteButton/AddToFavoriteButton\";\r\n\r\nimport {fonts} from \"../../../../styles/variables\";\r\n\r\nconst LocationWrapper = styled.div`\r\n  font-family: ${fonts.Roboto};\r\n  font-size: 1.2rem;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 30px;\r\n  position: absolute;\r\n  bottom: 20px;\r\n\r\n  span.country {\r\n    text-transform: uppercase;\r\n    margin-right: 10px;\r\n    margin-left: 3px;\r\n  }\r\n`;\r\n\r\nconst Location = ({cityInfo, isFavorite, toggleFavorite}) => {\r\n    return (\r\n        <LocationWrapper>\r\n            <span>{cityInfo.name + ','}</span>\r\n            <span className=\"country\">{cityInfo.country}</span>\r\n            <AddToFavoriteButton isFavorite={isFavorite} cityID={cityInfo.id}\r\n                                 toggleFavorite={toggleFavorite}/>\r\n        </LocationWrapper>\r\n    );\r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\n\r\nimport MainImage from \"./MainImage/MainImage\";\r\nimport Temperature from \"./Temperature/Temperature\";\r\nimport Date from \"./Date/Date\";\r\nimport {Line} from \"./Line\";\r\nimport OtherConditions from \"./OtherConditions/OtherConditions\";\r\nimport Location from \"./Location/Location\";\r\n\r\nconst ShowInfo = ({currentCity, isFavorite, toggleFavorite}) => {\r\n    return (\r\n        <>\r\n            <MainImage currentWeather={currentCity.weather[0]}/>\r\n            <Temperature currentTemp={currentCity.temp.currentTemp}/>\r\n            <Date date={currentCity.date}/>\r\n\r\n            <Line/>\r\n\r\n            <OtherConditions weather={currentCity.weather}/>\r\n            <Location isFavorite={isFavorite} toggleFavorite={toggleFavorite} cityInfo={currentCity.city}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowInfo;\r\n","export default __webpack_public_path__ + \"static/media/preloader.9f90125c.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport preloaderSvg from '../../assets/preloader.svg';\r\n\r\nconst Image = styled.img`\r\n  width: 30px;\r\n  height: 30px;\r\n`;\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <Image src={preloaderSvg} alt=\"Loading...\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;\r\n","const STORAGE_NAME = 'favorites';\r\n\r\nexport const getFavoritesFromLocalStorage = () => {\r\n    return localStorage.getItem(STORAGE_NAME);\r\n}\r\n\r\nexport const setFavoritesItemToLocalStorage = (item) => {\r\n    localStorage.setItem(STORAGE_NAME, JSON.stringify(item));\r\n};\r\nexport const removeFavoritesFromLocalStorage = () => {\r\n    localStorage.removeItem(STORAGE_NAME);\r\n};\r\n","import {\r\n    getFavoritesFromLocalStorage, removeFavoritesFromLocalStorage,\r\n    setFavoritesItemToLocalStorage\r\n} from \"../../utils/localStorage/favoriteLocalStorage\";\r\nimport {getCurrentWeatherFromAPIByID} from \"../../utils/weather/currentWeather\";\r\n\r\nconst GET_FAVORITES = \"favorite/GET_FAVORITES\";\r\nconst GET_FAVORITES_WEATHER = \"favorite/GET_FAVORITES_WEATHER\";\r\nconst SET_IS_FETCHING = \"favorite/SET_IS_FETCHING\";\r\n\r\nconst initialState = {\r\n    // IDs OF FAVORITES CITIES FROM LOCAL STORAGE\r\n    favorites: [],\r\n    favoritesWeather: [\r\n        // {id, name, country ...}\r\n        // {id, name, country ...}\r\n        // {id, name, country ...}\r\n    ],\r\n    errorMessage: null,\r\n    isFetching: false\r\n}\r\n\r\nconst favoritesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favorites: [...action.favorites]\r\n            }\r\n        case GET_FAVORITES_WEATHER:\r\n            return {\r\n                ...state,\r\n                favoritesWeather: [...action.favoritesWeather]\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.fetched\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getFavoritesActionCreator = (favorites) => ({type: GET_FAVORITES, favorites})\r\nconst getFavoritesWeatherActionCreator = (favoritesWeather) => ({type: GET_FAVORITES_WEATHER, favoritesWeather})\r\nconst setIsFetchingActionCreator = (fetched) => ({type: SET_IS_FETCHING, fetched})\r\n\r\nexport const getFavorites = () => (dispatch) => {\r\n    const favoritesLocalStorage = getFavoritesFromLocalStorage();\r\n\r\n    if (favoritesLocalStorage) {\r\n        const favorites = JSON.parse(favoritesLocalStorage);\r\n\r\n        dispatch(getFavoritesActionCreator(favorites));\r\n    }\r\n}\r\nexport const addFavorite = (id) => (dispatch) => {\r\n    const favoritesLocalStorage = getFavoritesFromLocalStorage();\r\n\r\n    const favorites = JSON.parse(favoritesLocalStorage) || [];\r\n    favorites.push(id);\r\n\r\n    setFavoritesItemToLocalStorage(favorites);\r\n\r\n    dispatch(getFavorites());\r\n}\r\nexport const deleteFavorite = (favoriteID) => (dispatch) => {\r\n    const favoritesLocalStorage = getFavoritesFromLocalStorage();\r\n\r\n    if (favoritesLocalStorage) {\r\n        let favorites = JSON.parse(favoritesLocalStorage);\r\n        favorites = favorites.filter(id => id !== favoriteID);\r\n\r\n        if (favorites.length === 0) {\r\n            removeFavoritesFromLocalStorage()\r\n        } else {\r\n            setFavoritesItemToLocalStorage(favorites);\r\n        }\r\n\r\n        dispatch(getFavorites());\r\n    }\r\n}\r\n\r\nexport const getFavoritesWeatherThunk = (favorites, favoritesWeather) => async (dispatch) => {\r\n    dispatch(setIsFetchingActionCreator(true));\r\n\r\n    let newFavoritesWeather = [...favoritesWeather];\r\n    const favoritesWeatherIDs = newFavoritesWeather.map(weather => weather.city.id);\r\n\r\n    if (favorites.length !== 0) {\r\n        for (const id of favorites) {\r\n            if (favoritesWeather.length === 0 || !favoritesWeatherIDs.includes(id)) {\r\n                newFavoritesWeather.push(await getCurrentWeatherFromAPIByID(id));\r\n            } else if (favoritesWeather.length !== 0 && favorites.length < favoritesWeather.length) {\r\n                // IF NEED DELETE FAVORITE ELEMENT WE REBUILD ARRAY BASED ON favorites[]\r\n                newFavoritesWeather = favorites.map(favoriteId => {\r\n                    const filteredArray = favoritesWeather.filter(weatherItem => favoriteId === weatherItem.city.id);\r\n\r\n                    return filteredArray[0];\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatch(getFavoritesWeatherActionCreator(newFavoritesWeather));\r\n    dispatch(setIsFetchingActionCreator(false));\r\n}\r\n\r\nexport default favoritesReducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {\r\n    getCurrentCitySelector,\r\n    getErrorMessageSelector,\r\n    getIsFetchingCurrentWeatherSelector\r\n} from \"../../redux/selectors/currentWeatherSelector\";\r\nimport {getFavoritesSelector} from \"../../redux/selectors/favoritesSelector\";\r\n\r\nimport Search from \"./Search/Search\";\r\nimport MenuBar from \"./MenuBar/MenuBar\";\r\nimport ShowInfo from \"./ShowInfo/ShowInfo\";\r\nimport Preloader from \"../common/Preloader\";\r\n\r\nimport {colors} from \"../../styles/variables\";\r\nimport {addFavorite, deleteFavorite} from \"../../redux/reducers/favoritesReducer\";\r\nimport {setErrorActionCreator} from \"../../redux/reducers/currentWeatherReducer\";\r\n\r\nconst Info = styled.div`\r\n  flex-basis: 220px;\r\n  padding-top: 20px;\r\n`;\r\nconst InfoWrapper = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nconst CityNotSelectedWrapper = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n\r\n  span {\r\n    font-size: 1rem;\r\n    color: ${colors.greyFontColorLight};\r\n  }\r\n`;\r\nconst Bar = styled(MenuBar)`\r\n  position: absolute;\r\n  padding: 0;\r\n  right: 0;\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n`;\r\n\r\nconst WeatherInfo = ({setMustShowFavorite, mustShowFavorite}) => {\r\n    const currentCity = useSelector(getCurrentCitySelector);\r\n    const errorMessage = useSelector(getErrorMessageSelector);\r\n    const isFetching = useSelector(getIsFetchingCurrentWeatherSelector);\r\n    const favorites = useSelector(getFavoritesSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    const [isFavorite, setIsFavorite] = React.useState(false);\r\n    React.useEffect(() => {\r\n        if (currentCity) {\r\n            dispatch(setErrorActionCreator(null));\r\n            setIsFavorite(favorites.includes(currentCity.city.id));\r\n        }\r\n    }, [favorites, currentCity])\r\n\r\n    const toggleFavorite = (cityID) => {\r\n        if (isFavorite) {\r\n            dispatch(deleteFavorite(cityID));\r\n            setIsFavorite(false);\r\n        } else {\r\n            dispatch(addFavorite(cityID));\r\n            setIsFavorite(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Info>\r\n            <InfoWrapper>\r\n                <Search/>\r\n                <Bar\r\n                    mustShowFavorite={mustShowFavorite}\r\n                    setMustShowFavorite={setMustShowFavorite}\r\n                />\r\n\r\n                {isFetching && <Preloader/>}\r\n                {currentCity &&\r\n                <ShowInfo currentCity={currentCity} isFavorite={isFavorite} toggleFavorite={toggleFavorite}/>}\r\n                {!currentCity && !errorMessage && !isFetching && <CityNotSelected/>}\r\n\r\n                {errorMessage &&\r\n                <ErrorMessage>\r\n                    <span>{errorMessage}</span>\r\n                </ErrorMessage>}\r\n            </InfoWrapper>\r\n        </Info>\r\n    );\r\n};\r\n\r\nconst CityNotSelected = () => {\r\n    return (\r\n        <CityNotSelectedWrapper>\r\n            <span>City is not selected</span>\r\n        </CityNotSelectedWrapper>\r\n    );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import styled from 'styled-components';\r\n\r\nconst InfoBlock = styled.div`\r\n  border-radius: 10px;\r\n  background-color: #FFFDF9;\r\n  height: 40px;\r\n`;\r\n\r\nexport const InfoBlockBig = styled(InfoBlock)`\r\n  width: 120px;\r\n`;\r\nexport const InfoBlockSmall = styled(InfoBlock)`\r\n  width: 55px;\r\n`;","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {InfoBlockSmall} from \"../../../styles/common/InfoBlock\";\r\nimport {colors} from \"../../../styles/variables\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst ForecastBlock = styled(InfoBlockSmall)`\r\n  text-align: center;\r\n  padding: 10px;\r\n  height: 70px;\r\n\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`;\r\nconst Temp = styled.div`\r\n  span.night-temp {\r\n    color: ${colors.greyFontColorLight};\r\n  }\r\n`;\r\n\r\nconst Forecast = ({forecast, isFetching, currentTemp, currentWeatherIcon}) => {\r\n    const forecastWithCurrentWeather = React.useMemo(() => {\r\n        if (forecast) {\r\n            return [{\r\n                weekDay: forecast[0].weekDay,\r\n                temp: {\r\n                    day: !!forecast[0].temp.day !== false ? currentTemp : NaN,\r\n                    night: forecast[0].temp.night\r\n                },\r\n                icon2x: currentWeatherIcon\r\n            }, ...forecast.slice(1)]\r\n        }\r\n    }, [forecast, currentTemp, currentWeatherIcon])\r\n\r\n    return (\r\n        <div>\r\n            <h2 className='title'>Forecast</h2>\r\n\r\n            {isFetching || !forecastWithCurrentWeather\r\n                ? <Preloader/>\r\n                : <Wrapper>\r\n                    {forecastWithCurrentWeather.map(forecastItem => {\r\n                        return <ForecastBlock key={forecastItem.weekDay}>\r\n                            <span>{forecastItem.weekDay}</span>\r\n                            <img src={forecastItem.icon2x} alt={forecastItem.weekDay + ' forecast'}/>\r\n                            <Temp>\r\n                                <span className=\"day-temp\">\r\n                                    {isNaN(forecastItem.temp.day) ? '-' : forecastItem.temp.day}\r\n                                </span>\r\n                                <span> / </span>\r\n                                <span className=\"night-temp\">\r\n                                    {isNaN(forecastItem.temp.night) ? '-' : forecastItem.temp.night}\r\n                                </span>\r\n                            </Temp>\r\n                        </ForecastBlock>\r\n                    })}\r\n                </Wrapper>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Forecast;\r\n","import styled from \"styled-components\";\r\nimport {InfoBlockBig} from \"../../../../styles/common/InfoBlock\";\r\nimport {colors} from \"../../../../styles/variables\";\r\n\r\nexport const InfoBlock = styled(InfoBlockBig)`\r\n  height: 100px;\r\n  padding: 12px;\r\n\r\n  h3.block-title {\r\n    color: ${colors.greyFontColorLight};\r\n    margin: 0;\r\n  }\r\n\r\n  .content {\r\n    height: 80px;\r\n    display: flex;\r\n\r\n    &.center {\r\n      align-items: center;\r\n    }\r\n\r\n    &.flex-end {\r\n      flex-direction: column;\r\n      justify-content: flex-end;\r\n    }\r\n  }\r\n\r\n  .caption {\r\n    font-size: 1.2rem;\r\n    font-weight: bold;\r\n    margin: 0;\r\n  }\r\n\r\n  .value-with-unit {\r\n    .value {\r\n      font-size: 3rem;\r\n    }\r\n\r\n    .unit {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {InfoBlock} from \"./InfoBlock\";\r\n\r\nconst HumidityStyled = styled(InfoBlock)`\r\n`;\r\n\r\nconst Humidity = ({humidity}) => {\r\n    return (\r\n        <HumidityStyled>\r\n            <h3 className=\"block-title\">Humidity</h3>\r\n            <div className=\"content center\">\r\n                <div className=\"value-with-unit\">\r\n                    <span className=\"value\">{humidity}</span>\r\n                    <span className=\"unit\"> %</span>\r\n                </div>\r\n            </div>\r\n        </HumidityStyled>\r\n    );\r\n};\r\n\r\nexport default Humidity;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {InfoBlock} from \"./InfoBlock\";\r\n\r\nconst PrecipitationStyled = styled(InfoBlock)`\r\n  .content {\r\n    .value {\r\n      font-size: 2rem;\r\n    }\r\n\r\n    .unit {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Precipitation = ({snow, rain}) => {\r\n    return (\r\n        <PrecipitationStyled>\r\n            <h3 className=\"block-title\">Precipitation</h3>\r\n            <div className=\"content center\">\r\n                {/*IF NO PRECIPITATION*/}\r\n                {!snow && !rain && <span>No precipitation</span>}\r\n\r\n                {/*IF SNOW*/}\r\n                {snow && <span>\r\n                    Snow:\r\n                    <span className=\"value\"> {snow}</span>\r\n                    <span className=\"unit\">mm</span>\r\n                </span>}\r\n\r\n                {/*IF RAIN*/}\r\n                {rain && <span>\r\n                    Rain:\r\n                    <span className=\"value\"> {rain}</span>\r\n                    <span className=\"unit\">mm</span>\r\n                </span>}\r\n            </div>\r\n        </PrecipitationStyled>\r\n    );\r\n};\r\n\r\nexport default Precipitation;\r\n","export default __webpack_public_path__ + \"static/media/sunrise.ef25fa2a.svg\";","export default __webpack_public_path__ + \"static/media/sunset.a5d0773c.svg\";","import styled from \"styled-components\";\r\nimport React from 'react';\r\nimport {InfoBlock} from \"./InfoBlock\";\r\nimport sunriseSvg from \"../../../../assets/images/sunrise.svg\";\r\nimport sunsetSvg from \"../../../../assets/images/sunset.svg\";\r\n\r\nconst SunsetSunriseStyled = styled(InfoBlock)`\r\n  .content {\r\n    p {\r\n      margin: 0;\r\n      display: flex;\r\n      align-items: center;\r\n      font-size: 1.5rem;\r\n\r\n      &:nth-child(1) {\r\n        margin-bottom: 7px;\r\n      }\r\n\r\n      img {\r\n        width: 25px;\r\n        height: 25px;\r\n        margin-left: 15px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst SunsetSunrise = ({sunset, sunrise}) => {\r\n    return (\r\n        <SunsetSunriseStyled>\r\n            <h3 className=\"block-title\">Sunrise & Sunset</h3>\r\n            <div className=\"content flex-end\">\r\n                <p>\r\n                    <span>{sunrise}</span>\r\n                    <img src={sunriseSvg} alt=\"Sunrise\"/>\r\n                </p>\r\n                <p>\r\n                    <span>{sunset}</span>\r\n                    <img src={sunsetSvg} alt=\"Sunset\"/>\r\n                </p>\r\n            </div>\r\n        </SunsetSunriseStyled>\r\n    );\r\n};\r\n\r\nexport default SunsetSunrise;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {InfoBlock} from \"./InfoBlock\";\r\n\r\nconst TempStyled = styled(InfoBlock)`\r\n  .content {\r\n    .value {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst Temp = ({tempMin, tempMax, feelsLike}) => {\r\n    return (\r\n        <TempStyled>\r\n            <h3 className=\"block-title\">Temperature</h3>\r\n            <div className=\"content flex-end\">\r\n                <span>min: <span className=\"value\">{tempMin} ℃</span></span>\r\n                <span>max: <span className=\"value\">{tempMax} ℃</span></span>\r\n                <span>Feels like: <span className=\"value\">{feelsLike} ℃</span></span>\r\n            </div>\r\n        </TempStyled>\r\n    );\r\n};\r\n\r\nexport default Temp;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {InfoBlock} from \"./InfoBlock\";\r\n\r\nconst VisibilityStyled = styled(InfoBlock)`\r\n`;\r\n\r\nconst Visibility = ({visibility}) => {\r\n    return (\r\n        <VisibilityStyled>\r\n            <h3 className=\"block-title\">Visibility</h3>\r\n            <div className=\"content center\">\r\n                <div className=\"value-with-unit\">\r\n                    <span className=\"value\">{visibility}</span>\r\n                    <span className=\"unit\"> km</span>\r\n                </div>\r\n            </div>\r\n        </VisibilityStyled>\r\n    );\r\n};\r\n\r\nexport default Visibility;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {colors} from \"../../../../styles/variables\";\r\n\r\nconst CompassWrapper = styled.div`\r\n  margin-left: 10px;\r\n  \r\n  svg {\r\n    width: 25px;\r\n    height: 25px;\r\n    fill: ${colors.greyFontColorDark}\r\n  }\r\n\r\n  #arrow {\r\n    transform-origin: center;\r\n    transform-box: fill-box;\r\n    transform: rotate(${props => props.degrees}deg);\r\n  }\r\n`;\r\n\r\nconst Compass = ({degrees}) => {\r\n    return (\r\n        <CompassWrapper degrees={degrees}>\r\n            <svg version=\"1.1\" id=\"Capa_1\"\r\n                 xmlns=\"http://www.w3.org/2000/svg\"\r\n                 viewBox=\"0 0 490 490\">\r\n                <g>\r\n                    <path d=\"M245,490c135.31,0,245-109.69,245-245C490,109.69,380.31,0,245,0S0,109.69,0,245C0,380.31,109.69,490,245,490z M245,30.625\r\n                    c118.206,0,214.375,96.168,214.375,214.375c0,118.206-96.169,214.375-214.375,214.375c-118.207,0-214.375-96.169-214.375-214.375\r\n                    C30.625,126.793,126.793,30.625,245,30.625z\"/>\r\n                    <path id=\"arrow\" d=\"M388.428,371.511L245,72.551l-143.428,298.96L245,279.522L388.428,371.511z M175.848,287.49L245,143.352l69.152,144.138\r\n                    l-52.618-33.747L245,243.139l-16.534,10.604L175.848,287.49z\"/>\r\n                </g>\r\n            </svg>\r\n        </CompassWrapper>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nimport {InfoBlock} from \"./InfoBlock\";\r\nimport Compass from \"../Compass/Compass\";\r\n\r\nexport const WindStyled = styled(InfoBlock)`\r\n  .content {\r\n    height: 72px;\r\n  }\r\n\r\n  .wind {\r\n    &-title {\r\n      display: flex;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Wind = ({degrees, windSpeed}) => {\r\n    return (\r\n        <WindStyled degrees={degrees}>\r\n            <div className=\"wind-title\">\r\n                <h3 className=\"block-title\">Wind Status</h3>\r\n                <Compass degrees={degrees}/>\r\n            </div>\r\n            <div className=\"content flex-end\">\r\n                <p className=\"caption\">Speed:</p>\r\n                <div className=\"value-with-unit\">\r\n                    <span className=\"value\">{windSpeed}</span>\r\n                    <span className=\"unit\"> m/s</span>\r\n                </div>\r\n            </div>\r\n        </WindStyled>\r\n    );\r\n};\r\n\r\nexport default Wind;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {Wind, Humidity, Precipitation, SunsetSunrise, Temp, Visibility} from \"./Blocs/\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n`;\r\n\r\nconst CurrentWeather = ({currentCity}) => {\r\n    return (\r\n        <>\r\n            <h2 className='title'>Current Weather</h2>\r\n            <Wrapper>\r\n                <Wind degrees={currentCity.wind.deg} windSpeed={currentCity.wind.speed}/>\r\n                <SunsetSunrise sunrise={currentCity.city.sunrise} sunset={currentCity.city.sunset}/>\r\n                <Visibility visibility={currentCity.visibility}/>\r\n                <Humidity humidity={currentCity.humidity}/>\r\n                <Temp tempMin={currentCity.temp.tempMin} tempMax={currentCity.temp.tempMax}\r\n                      feelsLike={currentCity.temp.feelsLike}/>\r\n                <Precipitation rain={currentCity.rain} snow={currentCity.snow}/>\r\n            </Wrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFavoritesWeatherSelector, getIsFetchingFavoriteSelector} from \"../../../redux/selectors/favoritesSelector\";\r\n\r\nimport {InfoBlockBig} from \"../../../styles/common/InfoBlock\";\r\nimport {colors} from \"../../../styles/variables\";\r\n\r\nconst FavoriteWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-gap: 15px;\r\n  height: calc(100% - 60px);\r\n  overflow-y: scroll;\r\n`;\r\nconst WeatherItem = styled(InfoBlockBig)`\r\n  padding: 10px 0;\r\n  height: 95px;\r\n  cursor: pointer;\r\n  border: 1px solid transparent;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    border-color: #867f7f;\r\n  }\r\n`;\r\nconst Location = styled.div`\r\n  span {\r\n    text-align: center;\r\n    display: block;\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  span.country {\r\n    color: ${colors.greyFontColorLight};\r\n  }\r\n`;\r\nconst Temp = styled.div`\r\n  margin-left: -11px;\r\n  margin-top: 10px;\r\n\r\n  span {\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n    position: relative;\r\n\r\n    span.deg {\r\n      font-size: 1rem;\r\n      position: absolute;\r\n      top: 2px;\r\n      right: -1.2rem;\r\n    }\r\n  }\r\n`;\r\nconst Weather = styled.div`\r\n  margin-left: -20px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  img {\r\n    width: 30px;\r\n    height: 30px;\r\n  }\r\n`;\r\n\r\nconst Favorites = ({favorites, getFavoritesWeather, onSelectFavorite}) => {\r\n    const isFetching = useSelector(getIsFetchingFavoriteSelector);\r\n    const favoritesWeather = useSelector(getFavoritesWeatherSelector);\r\n\r\n    React.useEffect(() => {\r\n        getFavoritesWeather(favorites, favoritesWeather);\r\n    }, [favorites])\r\n\r\n    return (\r\n        <>\r\n            <h2 className='title'>Favorites</h2>\r\n\r\n            {isFetching ? <Preloader/>\r\n                : <FavoriteWrapper>\r\n                    {favoritesWeather.map(weatherItem =>\r\n                        <WeatherItem key={weatherItem.city.id} onClick={() => onSelectFavorite(weatherItem)}>\r\n                            <Location>\r\n                                <span className='city'>{weatherItem.city.name}</span>\r\n                                <span className='country'>{weatherItem.city.country}</span>\r\n                            </Location>\r\n                            <Temp>\r\n                                <span>\r\n                                    {weatherItem.temp.currentTemp}\r\n                                    <span className=\"deg\">℃</span>\r\n                                </span>\r\n                            </Temp>\r\n                            <Weather>\r\n                                <img src={weatherItem.weather[0].icon2x} alt={weatherItem.weather[0].main}/>\r\n                                <span>{weatherItem.weather[0].main}</span>\r\n                            </Weather>\r\n                        </WeatherItem>\r\n                    )}\r\n                </FavoriteWrapper>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Favorites;\r\n","import {get5DaysForecastByID} from \"../../api/api\";\r\nimport {getFormattedMonth, getIconUrl} from \"./common\";\r\n\r\nexport const getForecastWeatherFromAPIByID = async (cityID) => {\r\n    return normalizeData(await get5DaysForecastByID(cityID));\r\n}\r\n\r\nconst normalizeData = (data) => {\r\n    // OUTPUT:\r\n    // [\r\n    //  {weekDay: 'Tuesday', temp: {day: 30, night: -10}, icon2x: 'daskdaspod.com/${a23}2x'},\r\n    //  {weekDay: 'Tuesday', temp: {day: 30, night: -10}, icon2x: 'daskdaspod.com/${a23}2x'}\r\n    // ]\r\n    const fiveDaysObjectWithDatesKeys = getFiveDaysWithDatesKeys(data.list[0]['dt_txt']);\r\n    const forecast = [];\r\n\r\n    data.list.forEach(listItem => {\r\n        const currentDateArray = fiveDaysObjectWithDatesKeys[listItem[\"dt_txt\"].split(' ')[0]];\r\n        if (currentDateArray) currentDateArray.push(listItem);\r\n    });\r\n    Object.keys(fiveDaysObjectWithDatesKeys).forEach(key => {\r\n        forecast.push(prepareForecastItem(fiveDaysObjectWithDatesKeys[key], key));\r\n    })\r\n\r\n    return forecast\r\n}\r\n\r\nconst getFiveDaysWithDatesKeys = (currentDate) => {\r\n    const currentDay = currentDate.split(' ')[0].split('-')[2];\r\n    const fiveDaysObject = {};\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n        const date = new Date(currentDate.split(' ')[0]);\r\n        date.setDate(+currentDay + i);\r\n        const month = getFormattedMonth(date.getMonth());\r\n\r\n        fiveDaysObject[`${date.getFullYear()}-${month}-${date.getDate()}`] = [];\r\n    }\r\n\r\n    return fiveDaysObject;\r\n}\r\n\r\nconst prepareForecastItem = (forecastItem, date) => {\r\n    const dayFiltered = forecastItem.filter(item => item.sys.pod === \"d\");\r\n    const nightFiltered = forecastItem.filter(item => item.sys.pod === \"n\");\r\n\r\n    const dayAverageTemp = Math.round(getSumDayNightTemp(dayFiltered) / dayFiltered.length);\r\n    const nightAverageTemp = Math.round(getSumDayNightTemp(nightFiltered) / nightFiltered.length);\r\n\r\n    const iconUrl = selectForecastIcon(dayFiltered.length > 0\r\n        ? dayFiltered\r\n        : nightFiltered);\r\n    const weekDay = getWeekDayText(date);\r\n\r\n    return {weekDay, temp: {day: dayAverageTemp, night: nightAverageTemp}, icon2x: iconUrl}\r\n}\r\n\r\nconst getSumDayNightTemp = (filteredArray) => {\r\n    return filteredArray.reduce((sum, item) => {\r\n        return sum += item.main.temp\r\n    }, 0);\r\n}\r\nconst selectForecastIcon = (filteredArray) => {\r\n    return getIconUrl(filteredArray[Math.floor(filteredArray.length / 2)].weather[0].icon, '2x');\r\n}\r\nconst getWeekDayText = (dateForecast) => {\r\n    const date = new Date(dateForecast);\r\n    const weekNumToStr = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    return weekNumToStr[date.getDay()]\r\n}","import {getForecastWeatherFromAPIByID} from \"../../utils/weather/forecastWeather\";\r\n\r\nconst SET_FORECAST = 'GET_FORECAST';\r\nconst SET_IS_FETCHING = 'SET_IS_FETCHING';\r\n\r\nconst initialState = {\r\n    forecast: null,\r\n    isFetching: false\r\n}\r\n\r\nconst forecastWeatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_FORECAST:\r\n            return {\r\n                ...state,\r\n                forecast: action.forecast\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.fetched\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setForecastActionCreator = (forecast) => ({type: SET_FORECAST, forecast});\r\nconst setIsFetchingActionCreator = (fetched) => ({type: SET_IS_FETCHING, fetched});\r\n\r\nexport const getForecastThunk = (cityID) => async (dispatch) => {\r\n    dispatch(setIsFetchingActionCreator(true));\r\n\r\n    const forecast = await getForecastWeatherFromAPIByID(cityID);\r\n    dispatch(setForecastActionCreator(forecast));\r\n\r\n    dispatch(setIsFetchingActionCreator(false));\r\n}\r\n\r\nexport default forecastWeatherReducer;","export const getForecastSelector = (state) => {\r\n    return state.forecastWeather.forecast;\r\n}\r\n\r\nexport const getIsFetchingForecastSelector = (state) => {\r\n    return state.forecastWeather.isFetching;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport Forecast from \"./Forecast/Forecast\";\r\nimport CurrentWeather from \"./CurrentWeather/CurrentWeather\";\r\nimport Favorites from \"./Favorites/Favorites\";\r\n\r\nimport {colors} from \"../../styles/variables\";\r\nimport {getCurrentCitySelector} from \"../../redux/selectors/currentWeatherSelector\";\r\nimport {getFavoritesSelector} from \"../../redux/selectors/favoritesSelector\";\r\nimport {getFavoritesWeatherThunk} from \"../../redux/reducers/favoritesReducer\";\r\nimport {setCurrentWeatherActionCreator} from \"../../redux/reducers/currentWeatherReducer\";\r\nimport {getForecastThunk} from \"../../redux/reducers/forecastWeatherReducer\";\r\nimport {getForecastSelector, getIsFetchingForecastSelector} from \"../../redux/selectors/forecastSelector\";\r\n\r\nconst Main = styled.div`\r\n  background-color: ${colors.mainBgColor};\r\n  flex: 1;\r\n`;\r\nconst Wrapper = styled.div`\r\n  padding: 0 30px;\r\n  height: 100%;\r\n\r\n  h2.title {\r\n    font-size: 1.6rem;\r\n  }\r\n`;\r\n\r\nconst WeatherMain = ({mustShowFavorite}) => {\r\n        const currentCity = useSelector(getCurrentCitySelector);\r\n        const favorites = useSelector(getFavoritesSelector);\r\n        const forecast = useSelector(getForecastSelector);\r\n        const isForecastFetching = useSelector(getIsFetchingForecastSelector);\r\n        const dispatch = useDispatch();\r\n\r\n        const getFavoritesWeather = (favorites, favoritesWeather) => {\r\n            dispatch(getFavoritesWeatherThunk(favorites, favoritesWeather));\r\n        }\r\n        const onSelectFavorite = (favoriteItem) => {\r\n            dispatch(setCurrentWeatherActionCreator(favoriteItem));\r\n        }\r\n\r\n        React.useEffect(() => {\r\n            if (currentCity) {\r\n                dispatch(getForecastThunk(currentCity.city.id));\r\n            }\r\n        }, [currentCity])\r\n\r\n        return (\r\n            <Main>\r\n                <Wrapper>\r\n                    {mustShowFavorite && <Favorites favorites={favorites} getFavoritesWeather={getFavoritesWeather}\r\n                                                    onSelectFavorite={onSelectFavorite}/>}\r\n                    {currentCity && !mustShowFavorite && <>\r\n                        <Forecast forecast={forecast} isFetching={isForecastFetching}\r\n                                  currentWeatherIcon={currentCity.weather[0].icon2x}\r\n                                  currentTemp={currentCity.temp.currentTemp}/>\r\n                        <CurrentWeather currentCity={currentCity}/>\r\n                    </>}\r\n                </Wrapper>\r\n            </Main>\r\n        );\r\n    }\r\n;\r\n\r\nexport default WeatherMain;\r\n","export const getIsFetchingSelector = (state) => state.initialization.isFetching;","import {getFavorites} from \"./favoritesReducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'initialization/INITIALIZED_SUCCESS';\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    isFetching: true\r\n}\r\n\r\nconst initializationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n                isFetching: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initializationSuccessActionCreator = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    dispatch(getFavorites());\r\n    dispatch(initializationSuccessActionCreator());\r\n}\r\n\r\nexport default initializationReducer;","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styled from 'styled-components';\r\n\r\nimport WeatherInfo from \"./components/WeaherInfo/WeatherInfo\";\r\nimport WeatherMain from \"./components/WeaherMain/WeatherMain\";\r\n\r\nimport {getIsFetchingSelector} from \"./redux/selectors/initializationSelector\";\r\nimport Preloader from \"./components/common/Preloader\";\r\nimport {initializeApp} from \"./redux/reducers/initializationReducer\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 730px;\r\n  height: 500px;\r\n  border-radius: 50px;\r\n  background-color: #fff;\r\n  position: absolute;\r\n  top: 50%;\r\n  bottom: 50%;\r\n  left: 50%;\r\n  right: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst App = () => {\r\n    const [mustShowFavorite, setMustShowFavorite] = React.useState(false);\r\n    const isFetching = useSelector(getIsFetchingSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch(initializeApp());\r\n    }, [dispatch])\r\n\r\n    if (isFetching) return <Preloader/>\r\n\r\n    return (\r\n        <Wrapper>\r\n            <WeatherInfo\r\n                setMustShowFavorite={setMustShowFavorite}\r\n                mustShowFavorite={mustShowFavorite}/>\r\n            <WeatherMain mustShowFavorite={mustShowFavorite}/>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport forecastWeatherReducer from \"./reducers/forecastWeatherReducer\";\r\nimport currentWeatherReducer from \"./reducers/currentWeatherReducer\";\r\nimport favoritesReducer from \"./reducers/favoritesReducer\";\r\nimport initializationReducer from \"./reducers/initializationReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    initialization: initializationReducer,\r\n    forecastWeather: forecastWeatherReducer,\r\n    currentWeather: currentWeatherReducer,\r\n    favorites: favoritesReducer,\r\n});\r\nconst store = createStore(reducers, compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n\r\nexport default store;","import {createGlobalStyle} from \"styled-components\";\r\nimport {colors, fonts} from \"./variables\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    font-size: 10px;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    font-family: ${fonts.CarmenSans};\r\n    font-weight: normal;\r\n    color: ${colors.greyFontColorDark};\r\n    background-color: ${colors.bodyBgColor};\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    box-sizing: border-box;\r\n  }\r\n`;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nimport './fonts/CarmenSans/fonts.css';\r\nimport './fonts/Roboto/stylesheet.css';\r\nimport {GlobalStyles} from \"./styles/GlobalStyles\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <GlobalStyles/>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}